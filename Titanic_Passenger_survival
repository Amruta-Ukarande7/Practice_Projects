{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "# to ignore warnings\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = pd.read_csv(\"https://raw.githubusercontent.com/dsrscientist/dataset1/master/titanic_train.csv\")\n",
    "test_data = pd.read_csv(\"https://raw.githubusercontent.com/dsrscientist/dataset1/master/titanic_train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.00</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.00</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                      Name  \\\n",
       "886          887         0       2                     Montvila, Rev. Juozas   \n",
       "887          888         1       1              Graham, Miss. Margaret Edith   \n",
       "888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n",
       "889          890         1       1                     Behr, Mr. Karl Howell   \n",
       "890          891         0       3                       Dooley, Mr. Patrick   \n",
       "\n",
       "        Sex   Age  SibSp  Parch      Ticket   Fare Cabin Embarked  \n",
       "886    male  27.0      0      0      211536  13.00   NaN        S  \n",
       "887  female  19.0      0      0      112053  30.00   B42        S  \n",
       "888  female   NaN      1      2  W./C. 6607  23.45   NaN        S  \n",
       "889    male  26.0      0      0      111369  30.00  C148        C  \n",
       "890    male  32.0      0      0      370376   7.75   NaN        Q  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    891\n",
       "Survived         2\n",
       "Pclass           3\n",
       "Name           891\n",
       "Sex              2\n",
       "Age             88\n",
       "SibSp            7\n",
       "Parch            7\n",
       "Ticket         681\n",
       "Fare           248\n",
       "Cabin          147\n",
       "Embarked         3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "# check for duplicates\n",
    "print(train_data.duplicated().sum())\n",
    "print(test_data.duplicated().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check for null values\n",
    "train_data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check for null values\n",
    "test_data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "S    644\n",
       "C    168\n",
       "Q     77\n",
       "Name: Embarked, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Embarked\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "S    646\n",
       "C    168\n",
       "Q     77\n",
       "Name: Embarked, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fill null values in Embarked with most common value 'S'\n",
    "train_data[\"Embarked\"].fillna(\"S\", inplace= True)\n",
    "\n",
    "train_data[\"Embarked\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.00</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.00</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                      Name  \\\n",
       "886          887         0       2                     Montvila, Rev. Juozas   \n",
       "887          888         1       1              Graham, Miss. Margaret Edith   \n",
       "888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n",
       "889          890         1       1                     Behr, Mr. Karl Howell   \n",
       "890          891         0       3                       Dooley, Mr. Patrick   \n",
       "\n",
       "        Sex   Age  SibSp  Parch      Ticket   Fare Cabin Embarked  \n",
       "886    male  27.0      0      0      211536  13.00   NaN        S  \n",
       "887  female  19.0      0      0      112053  30.00   B42        S  \n",
       "888  female   NaN      1      2  W./C. 6607  23.45   NaN        S  \n",
       "889    male  26.0      0      0      111369  30.00  C148        C  \n",
       "890    male  32.0      0      0      370376   7.75   NaN        Q  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# show the distribution for Age \n",
    "sns.boxplot(data=train_data, x=\"Age\");\n",
    "age_median = train_data[\"Age\"].median()\n",
    "train_data[\"Age\"].fillna(age_median, inplace=True)\n",
    "\n",
    "age_median2 = test_data[\"Age\"].median()\n",
    "test_data[\"Age\"].fillna(age_median2, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "C23 C25 C27    4\n",
       "G6             4\n",
       "B96 B98        4\n",
       "E101           3\n",
       "F2             3\n",
       "              ..\n",
       "F E69          1\n",
       "A10            1\n",
       "E34            1\n",
       "C103           1\n",
       "C128           1\n",
       "Name: Cabin, Length: 147, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Cabin\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fill missing values in Cabin with \"N/A\"\n",
    "train_data['Cabin'] = train_data['Cabin'].fillna('N/A')\n",
    "test_data['Cabin'] = test_data['Cabin'].fillna('N/A')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# draw a boxplot for Age column\n",
    "sns.boxplot(data=train_data,x=\"Age\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    608\n",
       "1    209\n",
       "2     28\n",
       "4     18\n",
       "3     16\n",
       "8      7\n",
       "5      5\n",
       "Name: SibSp, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"SibSp\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    678\n",
       "1    118\n",
       "2     80\n",
       "5      5\n",
       "3      5\n",
       "4      4\n",
       "6      1\n",
       "Name: Parch, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Parch\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CA. 2343    7\n",
       "1601        7\n",
       "347082      7\n",
       "347088      6\n",
       "CA 2144     6\n",
       "           ..\n",
       "3101296     1\n",
       "29108       1\n",
       "367228      1\n",
       "111427      1\n",
       "A/5. 851    1\n",
       "Name: Ticket, Length: 681, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Ticket\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data=train_data,x=\"Fare\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "80.0"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data[\"Age\"].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(train_data[\"Age\"]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create AgeGroup column\n",
    "bins = [0, 12, 18, 30, 50, 100]\n",
    "labels = ['Child', 'Teenager', 'Young Adult', 'Adult', 'Senior']\n",
    "train_data['AgeGroup'] = pd.cut(train_data['Age'], bins=bins, labels=labels)\n",
    "test_data[\"AgeGroup\"] = pd.cut(test_data[\"Age\"], bins=bins, labels = labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Young Adult    447\n",
       "Adult          241\n",
       "Teenager        70\n",
       "Child           69\n",
       "Senior          64\n",
       "Name: AgeGroup, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"AgeGroup\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create title column \n",
    "train_data[\"Title\"] = [name.split(',')[1].split('.')[0].strip() for name in train_data['Name']]\n",
    "test_data[\"Title\"] = [name.split(',')[1].split('.')[0].strip() for name in test_data['Name']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mr              517\n",
       "Miss            182\n",
       "Mrs             125\n",
       "Master           40\n",
       "Dr                7\n",
       "Rev               6\n",
       "Col               2\n",
       "Mlle              2\n",
       "Major             2\n",
       "Jonkheer          1\n",
       "the Countess      1\n",
       "Ms                1\n",
       "Capt              1\n",
       "Don               1\n",
       "Mme               1\n",
       "Sir               1\n",
       "Lady              1\n",
       "Name: Title, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Title\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mr              517\n",
       "Miss            182\n",
       "Mrs             125\n",
       "Master           40\n",
       "Dr                7\n",
       "Rev               6\n",
       "Col               2\n",
       "Mlle              2\n",
       "Major             2\n",
       "Jonkheer          1\n",
       "the Countess      1\n",
       "Ms                1\n",
       "Capt              1\n",
       "Don               1\n",
       "Mme               1\n",
       "Sir               1\n",
       "Lady              1\n",
       "Name: Title, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data[\"Title\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data['Title'] = train_data['Title'].replace(['Dr', 'Rev', 'Major', 'Col', 'Capt', 'Sir', 'Lady', 'Don', 'Jonkheer', 'Countess', 'Mme', 'Ms', 'Mlle','the Countess' ], 'Other')\n",
    "test_data['Title'] = test_data['Title'].replace(['Dr', 'Rev', 'Major', 'Col', 'Capt', 'Sir', 'Lady', 'Don', 'Jonkheer', 'Countess', 'Mme', 'Ms', 'Mlle','the Countess','Dona'], 'Other')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mr        517\n",
       "Miss      182\n",
       "Mrs       125\n",
       "Master     40\n",
       "Other      27\n",
       "Name: Title, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Title\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mr        517\n",
       "Miss      182\n",
       "Mrs       125\n",
       "Master     40\n",
       "Other      27\n",
       "Name: Title, dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data[\"Title\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeGroup</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.00</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Other</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.00</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.45</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.00</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.75</td>\n",
       "      <td>N/A</td>\n",
       "      <td>Q</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass                                      Name  \\\n",
       "886          887         0       2                     Montvila, Rev. Juozas   \n",
       "887          888         1       1              Graham, Miss. Margaret Edith   \n",
       "888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n",
       "889          890         1       1                     Behr, Mr. Karl Howell   \n",
       "890          891         0       3                       Dooley, Mr. Patrick   \n",
       "\n",
       "        Sex   Age  SibSp  Parch      Ticket   Fare Cabin Embarked  \\\n",
       "886    male  27.0      0      0      211536  13.00   N/A        S   \n",
       "887  female  19.0      0      0      112053  30.00   B42        S   \n",
       "888  female  28.0      1      2  W./C. 6607  23.45   N/A        S   \n",
       "889    male  26.0      0      0      111369  30.00  C148        C   \n",
       "890    male  32.0      0      0      370376   7.75   N/A        Q   \n",
       "\n",
       "        AgeGroup  Title  \n",
       "886  Young Adult  Other  \n",
       "887  Young Adult   Miss  \n",
       "888  Young Adult   Miss  \n",
       "889  Young Adult     Mr  \n",
       "890        Adult     Mr  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a correlation matrix\n",
    "corr = train_data.corr()\n",
    "\n",
    "# Create a heatmap using seaborn\n",
    "sns.heatmap(corr, cmap=\"coolwarm\", annot=True);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The overall survival rate was: 38.38%\n"
     ]
    }
   ],
   "source": [
    "# Count the number of survivors\n",
    "num_survivors = train_data[\"Survived\"].sum()\n",
    "\n",
    "# Calculate the overall survival rate\n",
    "total_passengers = len(train_data)\n",
    "survival_rate = (num_survivors / total_passengers) * 100\n",
    "\n",
    "print(\"The overall survival rate was: {:.2f}%\".format(survival_rate))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x13295fa7b50>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Count plot\n",
    "plt.subplot(1, 2, 1) # 1 row, 2 columns, first plot\n",
    "sns.countplot(x='Pclass', hue='Survived', data=train_data, palette='Set1')\n",
    "plt.title('Count of Passengers by Class and Survival')\n",
    "plt.xlabel('Passenger Class')\n",
    "plt.ylabel('Count')\n",
    "plt.legend(title='Survived?', loc='upper right')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Bar plot\n",
    "plt.subplot(1, 2, 2) # 1 row, 2 columns, second plot\n",
    "survival_rate_by_class = train_data.groupby('Pclass')['Survived'].mean().reset_index()\n",
    "sns.barplot(x='Pclass', y='Survived', data=survival_rate_by_class, palette='Set1')\n",
    "plt.title('Survival Rate by Class')\n",
    "plt.xlabel('Passenger Class')\n",
    "plt.ylabel('Survival Rate')\n",
    "plt.ylim(0, 1) # Set y-axis limit from 0 to 1\n",
    "\n",
    "plt.tight_layout() # Adjust the layout of the plots\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate survival rate based on gender\n",
    "survival_rate = (train_data.groupby('Sex')['Survived'].mean()*100).round(1)\n",
    "\n",
    "# Plot survival rate by gender\n",
    "sns.barplot(x='Sex', y='Survived', data=train_data, ci=None, palette='Set1')\n",
    "plt.title(\"Survival rate by gender\")\n",
    "plt.show()\n",
    "\n",
    "# Select only the passengers who survived\n",
    "survived = train_data[train_data['Survived'] == 1]\n",
    "\n",
    "# Count the number of males and females\n",
    "gender_counts = survived['Sex'].value_counts()\n",
    "\n",
    "# Plot the gender pie chart\n",
    "palette = \"Set1\"\n",
    "colors = sns.color_palette(palette)\n",
    "\n",
    "labels = ['Female','Male']\n",
    "plt.pie(gender_counts, labels=labels, autopct='%1.1f%%', colors=colors)\n",
    "plt.title('Gender of Survivors')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeGroup</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked     AgeGroup Title  \n",
       "0      0         A/5 21171   7.2500   N/A        S  Young Adult    Mr  \n",
       "1      0          PC 17599  71.2833   C85        C        Adult   Mrs  \n",
       "2      0  STON/O2. 3101282   7.9250   N/A        S  Young Adult  Miss  \n",
       "3      0            113803  53.1000  C123        S        Adult   Mrs  \n",
       "4      0            373450   8.0500   N/A        S        Adult    Mr  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.violinplot(x='Survived', y='Age', data=train_data);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "agegroup_survival_rate = train_data.groupby('AgeGroup')['Survived'].mean().sort_values()\n",
    "\n",
    "colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2']\n",
    "\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.barh(agegroup_survival_rate.index, agegroup_survival_rate.values, color = colors)\n",
    "plt.title('Survival Rate by Age Group', fontsize=14)\n",
    "plt.xlabel('Survival Rate')\n",
    "plt.ylabel('Age Group')\n",
    "plt.xticks(np.arange(0, 1.1, 0.1))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeGroup</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked     AgeGroup Title  \n",
       "0      0         A/5 21171   7.2500   N/A        S  Young Adult    Mr  \n",
       "1      0          PC 17599  71.2833   C85        C        Adult   Mrs  \n",
       "2      0  STON/O2. 3101282   7.9250   N/A        S  Young Adult  Miss  \n",
       "3      0            113803  53.1000  C123        S        Adult   Mrs  \n",
       "4      0            373450   8.0500   N/A        S        Adult    Mr  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=\"SibSp\", hue=\"Survived\", data=train_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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ldx6660DkA7Gjh07INuRDqXVJ5pPycytAJm5NSJOruZPBH7Ya7nuat5+ImIhsBDgtNNOa2JUDRc/+MEPWLVqFU8//TSjR49mx44dvPHGGw2tu2fPHkaO7PuP0Zw5c5gzZ85ARpWabrCcaO7rwGj2tWBmLs3M6Zk5va2trcmxNBxs3bqV8ePHM3r0aADGjx/PqaeeSkdHBzt27ABgzZo1zJw5E4DFixezcOFCLrroIq6++mo+9rGPsW7durK9mTNn0tXVxd13380NN9zArl276Ojo4K233gLgl7/8JZMmTeLNN9/kxz/+MbNnz+bss8/mvPPO4/nnnwdg8+bNfPzjH+ecc87hc5/7XAv/a2i4a3UpvBwREwCq123V/G5gUq/l2oGXWpxNw9RFF13Eli1b+NCHPsR1113HE088cch1urq6ePjhh/nGN77B/PnzWbFiBdBTMC+99BJnn312Wfa9730vZ511Vtnut771LWbNmsWoUaNYuHAhd9xxB11dXXzhC1/guuuuA2DRokV85jOf4amnnuJ973tfE7611LdWl8JKYEE1vQB4uNf8+RExOiImA1OA1S3OpmFq7NixdHV1sXTpUtra2pg3bx533333QdeZM2cOxxxzDABXXHEFDzzwAAArVqxg7ty5+y0/b9487r//fgA6OzuZN28eu3fv5vvf/z5z585l2rRpfPrTn2br1q0AfO973+PKK68E4KqrrhqoryodUtPOKUTEfcBMYHxEdAM3A7cCKyLiWuBFYC5AZq6LiBXAemAPcH1m7m1WNmlfI0aMYObMmcycOZMzzjiDZcuWMXLkyHLIZ997AY499tgyPXHiRMaNG8ePfvQj7r//fr7yla/st/05c+Zw00038corr9DV1cUFF1zAq6++ygknnMDatWv7zOTlpqpDM68+ujIzJ2TmqMxsz8y7MnNnZl6YmVOq11d6Lb8kM38jMz+cmd9uVi5pXy+88AIbN24s79euXcv73/9+Ojo66OrqAuDBBx886Dbmz5/P5z//eXbt2sUZZ5yx3+djx45lxowZLFq0iEsuuYQRI0Zw/PHHM3ny5LKXkZk888wzAJx77rl0dnYCsHz58gH5nlIjBsuJZqk2u3fvZsGCBZx++umceeaZrF+/nsWLF3PzzTezaNEizjvvPEaMOPhtM5dffjmdnZ1cccUVB1xm3rx53Hvvvcyb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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x=\"Parch\", hue=\"Survived\", data=train_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Embarked', hue='Survived', data=train_data, palette='Set1')\n",
    "\n",
    "plt.title('Survival by Embarked', fontsize=14)\n",
    "plt.xlabel('Embarked')\n",
    "plt.ylabel('Count')\n",
    "plt.xticks(rotation=0)\n",
    "plt.legend(['Did Not Survive', 'Survived'], loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Embarked', y='Survived', data=train_data, ci=None, palette='Set1');\n",
    "plt.title(\"Survival rate by Embarked \")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeGroup</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked     AgeGroup Title  \n",
       "0      0         A/5 21171   7.2500   N/A        S  Young Adult    Mr  \n",
       "1      0          PC 17599  71.2833   C85        C        Adult   Mrs  \n",
       "2      0  STON/O2. 3101282   7.9250   N/A        S  Young Adult  Miss  \n",
       "3      0            113803  53.1000  C123        S        Adult   Mrs  \n",
       "4      0            373450   8.0500   N/A        S        Adult    Mr  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='Survived', y='Fare', data=train_data)\n",
    "plt.title('Fare by Survival')\n",
    "plt.xlabel('Survived')\n",
    "plt.ylabel('Fare')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Title', hue='Survived', data=train_data)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 14)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeGroup</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [PassengerId, Survived, Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, Embarked, AgeGroup, Title]\n",
       "Index: []"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[train_data[\"Title\"] == \"Dona\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mr        517\n",
       "Miss      182\n",
       "Mrs       125\n",
       "Master     40\n",
       "Other      27\n",
       "Name: Title, dtype: int64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data[\"Title\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data[\"FamilySize\"] = train_data[\"SibSp\"] + train_data[\"Parch\"] + 1\n",
    "test_data[\"FamilySize\"] = test_data[\"SibSp\"] + test_data[\"Parch\"] + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a new feature called IsAlone\n",
    "train_data['IsAlone'] = 0\n",
    "train_data.loc[(train_data[\"FamilySize\"]) == 0, 'IsAlone'] = 1\n",
    "\n",
    "test_data['IsAlone'] = 0\n",
    "test_data.loc[(test_data[\"FamilySize\"]) == 0, 'IsAlone'] = 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the Deck feature\n",
    "train_data['Deck'] = train_data['Cabin'].apply(lambda x: x[0])\n",
    "test_data['Deck'] = test_data['Cabin'].apply(lambda x: x[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeGroup</th>\n",
       "      <th>Title</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Deck</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Mr</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mr</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked     AgeGroup Title  \\\n",
       "0      0         A/5 21171   7.2500   N/A        S  Young Adult    Mr   \n",
       "1      0          PC 17599  71.2833   C85        C        Adult   Mrs   \n",
       "2      0  STON/O2. 3101282   7.9250   N/A        S  Young Adult  Miss   \n",
       "3      0            113803  53.1000  C123        S        Adult   Mrs   \n",
       "4      0            373450   8.0500   N/A        S        Adult    Mr   \n",
       "\n",
       "   FamilySize  IsAlone Deck  \n",
       "0           2        0    N  \n",
       "1           2        0    C  \n",
       "2           1        0    N  \n",
       "3           2        0    C  \n",
       "4           1        0    N  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>AgeGroup</th>\n",
       "      <th>Title</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Deck</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Mr</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Miss</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>N/A</td>\n",
       "      <td>S</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Mr</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked     AgeGroup Title  \\\n",
       "0      0         A/5 21171   7.2500   N/A        S  Young Adult    Mr   \n",
       "1      0          PC 17599  71.2833   C85        C        Adult   Mrs   \n",
       "2      0  STON/O2. 3101282   7.9250   N/A        S  Young Adult  Miss   \n",
       "3      0            113803  53.1000  C123        S        Adult   Mrs   \n",
       "4      0            373450   8.0500   N/A        S        Adult    Mr   \n",
       "\n",
       "   FamilySize  IsAlone Deck  \n",
       "0           2        0    N  \n",
       "1           2        0    C  \n",
       "2           1        0    N  \n",
       "3           2        0    C  \n",
       "4           1        0    N  "
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
