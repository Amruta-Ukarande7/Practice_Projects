{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=FutureWarning)\n",
    "\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(os.path.join(\"https://raw.githubusercontent.com/dsrscientist/DSData/master/happiness_score_dataset.csv\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_Ten_Happiest = data.sort_values(by = 'Happiness Rank')\n",
    "\n",
    "list_Ten_Happiest.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_Ten_LeastHappy = data.sort_values(by = 'Happiness Rank', ascending = False)\n",
    "\n",
    "list_Ten_LeastHappy.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Before separate the data, I will check that we just have six different regions. \n",
    "\n",
    "data.Region.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Look at which country has Europe as Region. \n",
    "\n",
    "data[data['Region'] == 'Europe']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing \"Europe\" by \"Eastern Europe\" in Ukraine\n",
    "\n",
    "data = data.replace(['Europe'] , 'Eastern Europe')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "africa_df = data[data['Region'] == 'Africa']\n",
    "\n",
    "asia_p_df = data[data['Region'] == 'Asia-Pacific']\n",
    "\n",
    "e_Europe_df = data[data['Region'] == 'Eastern Europe']\n",
    "\n",
    "w_Europe_df = data[data['Region'] == 'Western Europe']\n",
    "\n",
    "l_America = data[data['Region'] == 'Latin America']\n",
    "\n",
    "n_America = data[data['Region'] == 'North America']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_mean = data.groupby(['Region'])[['Happiness Score']].mean()\n",
    "\n",
    "data_mean.sort_values(by = 'Happiness Score', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "happinest_6 = data.loc[(data['Happiness Score'])>6]\n",
    "\n",
    "# Counting by region\n",
    "happinest_6 = happinest_6.groupby(['Region'])[['Happiness Score']].count()\n",
    "\n",
    "happinest_6.sort_values(by = 'Happiness Score', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_max_min = data.groupby(['Region'])[['Happiness Score']].max()-data.groupby(['Region'])[['Happiness Score']].min()\n",
    "\n",
    "r_max_min.sort_values(by = 'Happiness Score', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_plot = data.set_index('Country')\n",
    "data_plot = data_plot[0:10]['Happiness Score']\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (10,7))                               # Plot sizes\n",
    "bar_plot = data_plot.plot.barh()                                       # Horizontal bar plot \"barh\"\n",
    "bar_plot.set_title('Happiness Score of the top 10 countries')\n",
    "bar_plot.set_xlabel('Happiness Score')\n",
    "bar_plot.invert_yaxis()                                                # The biggest to smallest\n",
    "plt.xlim(0,8)                                                          # change x-axis limits\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_plot2 = data.copy()\n",
    "data_plot2 = data_plot2.loc[:,'Country':'Dystopia Residual'].head(10)\n",
    "\n",
    "\n",
    "y_cor = np.arange(10)\n",
    "Country = data_plot2.Country\n",
    "Economy(GDPperCapita) = data_plot2.Economy(GDPperCapita)\n",
    "Family = data_plot2.Family\n",
    "Health(LifeExpectancy) = data_plot2.Health(LifeExpectancy)\n",
    "Freedom = data_plot2.Freedom\n",
    "Generosity = data_plot2.Generosity\n",
    "Trust(GovernmentCorruption) = data_plot2.Trust(GovernmentCorruption)\n",
    "DystopiaResidual = data_plot2.DystopiaResidual\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (14,7))\n",
    "plt.barh(y_cor, Economy,color='#CD853F', edgecolor='black', label='Economy')\n",
    "plt.barh(y_cor, Family,color='silver', edgecolor='black', left=Economy, label='Family')\n",
    "plt.barh(y_cor, Health,color='blue', edgecolor='black', left=Family+Economy, label='Health')\n",
    "plt.barh(y_cor, Freedom,color='green', edgecolor='black', left=Health+Family+Economy, label='Freedom')\n",
    "plt.barh(y_cor, Generosity,color='m', edgecolor='black', left=Freedom+Health+Family+Economy, label='Generosity')\n",
    "plt.barh(y_cor, Corruption,color='c', edgecolor='black', left=Generosity+Freedom+Health+Family+Economy, label='Corruption')\n",
    "plt.barh(y_cor, Dystopia,color='y', edgecolor='black', left=Corruption+Generosity+Freedom+Health+Family+Economy, label='Dystopia')\n",
    "plt.yticks(y_cor,Country)\n",
    "plt.title('Overall happiness score divided')\n",
    "plt.xlabel('Happiness Score')\n",
    "plt.ylabel('Country')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlim(0,11)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rename columns to be easier work with them. \n",
    "\n",
    "df = data.rename(columns={'Happiness Score':'Happiness_Score'})\n",
    "df = df.rename(columns={'Happiness Rank':'Happiness_Rank'})\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_plot3 = africa_df.copy()\n",
    "data_plot3 = data_plot3.loc[:,'Country':'Dystopia']\n",
    "\n",
    "y2_cor = np.arange(len(data_plot3.Country))\n",
    "Country_a = data_plot3.Country\n",
    "Economy_a = data_plot3.Economy\n",
    "Family_a = data_plot3.Family\n",
    "Health_a = data_plot3.Health\n",
    "Freedom_a = data_plot3.Freedom\n",
    "Generosity_a = data_plot3.Generosity\n",
    "Corruption_a = data_plot3.Corruption\n",
    "Dystopia_a = data_plot3.Dystopia\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (19,19))\n",
    "plt.barh(y2_cor, Economy_a,color='#CD853F', edgecolor='black', label='Economy')\n",
    "plt.barh(y2_cor, Family_a,color='silver', edgecolor='black', left=Economy_a, label='Family')\n",
    "plt.barh(y2_cor, Health_a,color='blue', edgecolor='black', left=Family_a+Economy_a, label='Health')\n",
    "plt.barh(y2_cor, Freedom_a,color='green', edgecolor='black', left=Health_a+Family_a+Economy_a, label='Freedom')\n",
    "plt.barh(y2_cor, Generosity_a,color='m', edgecolor='black', left=Freedom_a+Health_a+Family_a+Economy_a, label='Generosity')\n",
    "plt.barh(y2_cor, Corruption_a,color='c', edgecolor='black', left=Generosity_a+Freedom_a+Health_a+Family_a+Economy_a, label='Corruption')\n",
    "plt.barh(y2_cor, Dystopia_a,color='y', edgecolor='black', left=Corruption_a+Generosity_a+Freedom_a+Health_a+Family_a+Economy_a, label='Dystopia')\n",
    "plt.yticks(y2_cor,Country_a)\n",
    "plt.title('Overall happiness score in Africa ')\n",
    "plt.xlabel('Happiness Score')\n",
    "plt.ylabel('Country')\n",
    "# plt.legend(loc='upper right')\n",
    "plt.legend(bbox_to_anchor=(1.07, 1), loc=2, borderaxespad=0.)\n",
    "plt.xlim(0,6)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(12,8))\n",
    "d_hist = data['Job Satisfaction'].hist(bins = [40, 50, 60, 70, 80, 90, 100], color='red', edgecolor='black')\n",
    "vals = d_hist.get_xticks()\n",
    "d_hist.set_xticklabels(['{0:.0%}'.format(x/100) for x in vals])\n",
    "plt.title('Histogram \"Job Satisfaction\"')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "e_data = df.copy()\n",
    "e_data = e_data.set_index('Country')                # Change index in DataFrame\n",
    "e_data = e_data.loc[:,'Happiness_Score':'Region']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# seaborn\n",
    "sns.pairplot(e_data, x_vars = ['Happiness_Score'], y_vars=['Economy','Family','Health','Freedom','Generosity','Corruption','Dystopia'], hue='Region', height=3)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_c = e_data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Correlation Happines Score vs Column\n",
    "\n",
    "# Information column\n",
    "\n",
    "list1=['Happiness vs Economy', \n",
    "       'Happiness vs Family',\n",
    "       'Happiness vs Health',\n",
    "       'Happiness vs Freedom',\n",
    "       'Happiness vs Generosity',\n",
    "       'Happiness vs Corruption',\n",
    "       'Happiness vs Dystopia' ]\n",
    "\n",
    "# Column of correlation\n",
    "h_e = np.corrcoef(data_c.Happiness_Score, data_c.Economy )[0,1]\n",
    "h_f = np.corrcoef(data_c.Happiness_Score, data_c.Family )[0,1]\n",
    "h_h = np.corrcoef(data_c.Happiness_Score, data_c.Health )[0,1]\n",
    "h_fr = np.corrcoef(data_c.Happiness_Score, data_c.Freedom )[0,1]\n",
    "h_g = np.corrcoef(data_c.Happiness_Score, data_c.Generosity )[0,1]\n",
    "h_c = np.corrcoef(data_c.Happiness_Score, data_c.Corruption )[0,1]\n",
    "h_d = np.corrcoef(data_c.Happiness_Score, data_c.Dystopia )[0,1]\n",
    "\n",
    "list2=[h_e,h_f,h_h,h_fr,h_g,h_c,h_d]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Corr = {'':list1,'Correlation':list2}\n",
    "df_c = pd.DataFrame(Corr)\n",
    "df_c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cols_corr=['Happiness_Score','Economy','Family','Health','Freedom',\n",
    "           'Generosity','Corruption','Dystopia', 'Job Satisfaction']\n",
    "corr_scores=data_c[cols_corr].corr()['Happiness_Score'][1:]\n",
    "corr_scores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# All countries with a Happiness score over 6.0\n",
    "\n",
    "Total_o_6 = data_c[(data_c.Happiness_Score > 6)].count()\n",
    "Total_over_6 = Total_o_6.Happiness_Score\n",
    "\n",
    "# Countries with a Happiness score over 6.0 and Western Europe\n",
    "\n",
    "we_Europe = data_c[(data_c.Happiness_Score > 6) & (data_c.Region == 'Western Europe')].count()\n",
    "Western_Eur = we_Europe.Happiness_Score\n",
    "\n",
    "pro = (Western_Eur/Total_over_6)*100\n",
    "\n",
    "print('The probability of randomly select a country with happiness score over 6.0 is {:.2f} %'.format(pro))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "countries_region"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
