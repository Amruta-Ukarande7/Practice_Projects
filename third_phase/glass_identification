{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas\n",
    "from sklearn import model_selection\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "import numpy as np\n",
    "import pickle\n",
    "import os.path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def open_dataset():\n",
    "    # Load dataset\n",
    "    url = \"https://raw.githubusercontent.com/dsrscientist/dataset3/main/glass.csv\"\n",
    "    names = [\n",
    "        'id',\n",
    "        'refractive-index',\n",
    "        'Sodium',\n",
    "        'Magnesium',\n",
    "        'Aluminum',\n",
    "        'Silicon',\n",
    "        'Potassium',\n",
    "        'Calcium',\n",
    "        'Barium',\n",
    "        'Iron',\n",
    "        'class'\n",
    "    ]\n",
    "    return pandas.read_csv(url, names=names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_data(dataset):\n",
    "    # seperate the elements and type of glass\n",
    "    array = dataset.values\n",
    "    X = array[:, 1:10]\n",
    "    Y = array[:, 10]\n",
    "    return X, Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_training(models):\n",
    "    dataset = open_dataset()\n",
    "    validation_size = 0.50\n",
    "    seed = 7\n",
    "    X, Y = split_data(dataset)\n",
    "    # splits the dataset into a training set and a test set\n",
    "    X_train, X_test, Y_train, Y_test = model_selection.train_test_split(\n",
    "        X,\n",
    "        Y,\n",
    "        test_size=validation_size,\n",
    "        random_state=seed\n",
    "    )\n",
    "    train_models(models, X_train, Y_train, X_test, Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_models(models, X_train, Y_train, X_test, Y_test):\n",
    "    classifiers = []\n",
    "    # iterates through the models\n",
    "    for name, model in models:\n",
    "        # chooses the index's for test and training set\n",
    "        kfold = model_selection.KFold(n_splits=4)\n",
    "        for traincv, testcv in kfold.split(X_train):\n",
    "            # trains the models\n",
    "            model.fit(X_train[traincv], Y_train[traincv])\n",
    "            # tests the models, doesn't output the result\n",
    "            model.predict(X_train[testcv])\n",
    "        # final test on the original test set\n",
    "        prediction = model.predict(X_test)\n",
    "        print(name, accuracy_score(prediction, Y_test) * 100)\n",
    "        with open(\n",
    "            'pickle/' + name + '_classifier.pickle',\n",
    "            'wb'\n",
    "        ) as ph:\n",
    "            pickle.dump(model, ph)\n",
    "        classifiers.append((name, model))\n",
    "    return classifiers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "glass_types = {\n",
    "    '1.0': 'Building Windows Float Processed',\n",
    "    '2.0': 'Building Windows Non Float Processed',\n",
    "    '3.0': 'Vehicle Windows Float Processed',\n",
    "    '4.0': 'Vehicle Windows Non Float Processed',\n",
    "    '5.0': 'Containers',\n",
    "    '6.0': 'Tableware',\n",
    "    '7.0': 'Headlamps'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifiers = [\n",
    "    'LogisticRegression',\n",
    "    'KNeighborsClassifier',\n",
    "    'DecisionTreeClassifier',\n",
    "    'SVM'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "models = []\n",
    "# checks whether the classifiers are already created\n",
    "# if there not, creates and tests them\n",
    "if os.path.isfile('pickle/SVM_classifier.pickle'):\n",
    "    for name in classifiers:\n",
    "        with open('pickle/SVM_classifier.pickle', 'rb') as ph:\n",
    "            models.append((name, pickle.load(ph)))\n",
    "else:\n",
    "    models.append(('LogisticRegression', LogisticRegression()))\n",
    "    models.append(('KNeighborsClassifier', KNeighborsClassifier(3)))\n",
    "    models.append(('DecisionTreeClassifier', DecisionTreeClassifier()))\n",
    "    models.append(('SVM', SVC()))\n",
    "    models = prepare_training(models)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# inputs new data to test\n",
    "ri = float(input(\"Enter Refractive Index: \"))\n",
    "na = float(input(\"Enter Sodium: \"))\n",
    "mg = float(input(\"Enter Magnesium: \"))\n",
    "al = float(input(\"Enter Aluminum: \"))\n",
    "si = float(input(\"Enter Silicon: \"))\n",
    "k = float(input(\"Enter Potassium: \"))\n",
    "ca = float(input(\"Enter Calcium: \"))\n",
    "ba = float(input(\"Enter Barium: \"))\n",
    "fe = float(input(\"Enter Iron: \"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# tests new data using the SVM classifier\n",
    "new_data = np.array([ri, na, mg, al, si, k, ca, ba, fe])\n",
    "prediction = models[3][1].predict(new_data.reshape(1, -1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# outputs the type of glass\n",
    "print('The type of glass is', glass_types[str(prediction[0])])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
